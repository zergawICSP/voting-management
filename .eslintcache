[{"F:\\Projects\\voting_system\\src\\index.js":"1","F:\\Projects\\voting_system\\src\\reportWebVitals.js":"2","F:\\Projects\\voting_system\\src\\App.js":"3","F:\\Projects\\voting_system\\src\\components\\layouts\\landing\\index_.js":"4","F:\\Projects\\voting_system\\src\\components\\layouts\\Login\\Root.js":"5","F:\\Projects\\voting_system\\src\\components\\layouts\\Login\\LoginForm.js":"6","F:\\Projects\\voting_system\\src\\store\\index_.js":"7","F:\\Projects\\voting_system\\src\\reducer\\rootReducer.js":"8","F:\\Projects\\voting_system\\src\\reducer\\authReducer.js":"9","F:\\Projects\\voting_system\\src\\action\\types.js":"10","F:\\Projects\\voting_system\\src\\action\\authAction.js":"11","F:\\Projects\\voting_system\\src\\components\\layouts\\home\\Root.js":"12","F:\\Projects\\voting_system\\src\\components\\layouts\\nav\\Nav.js":"13","F:\\Projects\\voting_system\\src\\action\\attendantsAction.js":"14","F:\\Projects\\voting_system\\src\\reducer\\attendantReducer.js":"15","F:\\Projects\\voting_system\\src\\components\\layouts\\vote\\Root.js":"16","F:\\Projects\\voting_system\\src\\components\\layouts\\vote\\AgendaVoteForm.js":"17","F:\\Projects\\voting_system\\src\\components\\layouts\\vote\\CandidateVoteForm.js":"18","F:\\Projects\\voting_system\\src\\reducer\\voteReducer.js":"19","F:\\Projects\\voting_system\\src\\api\\config.js":"20","F:\\Projects\\voting_system\\src\\action\\voteAction.js":"21","F:\\Projects\\voting_system\\src\\components\\layouts\\shareholderRegistration\\Root.js":"22","F:\\Projects\\voting_system\\src\\components\\layouts\\shareholderRegistration\\RegisterShareholderForm.js":"23","F:\\Projects\\voting_system\\src\\components\\layouts\\landing\\voteIndex.js":"24","F:\\Projects\\voting_system\\src\\components\\layouts\\agenda\\Root.js":"25","F:\\Projects\\voting_system\\src\\components\\shared\\shareedVariables.js":"26","F:\\Projects\\voting_system\\src\\components\\layouts\\nav\\LogoHeader.js":"27","F:\\Projects\\voting_system\\src\\components\\layouts\\vote\\CandidateVoteRoot.js":"28","F:\\Projects\\voting_system\\src\\components\\layouts\\shareholderRegistration\\viewShareholders.js":"29","F:\\Projects\\voting_system\\src\\components\\layouts\\shareholderRegistration\\ViewShareholders.js":"30","F:\\Projects\\voting_system\\src\\components\\layouts\\agenda\\RegisterNewAgenda.js":"31","F:\\Projects\\voting_system\\src\\components\\layouts\\home\\OnlyDelegatesHome.js":"32"},{"size":500,"mtime":499162500000,"results":"33","hashOfConfig":"34"},{"size":362,"mtime":499162500000,"results":"35","hashOfConfig":"34"},{"size":1950,"mtime":1613054946330,"results":"36","hashOfConfig":"34"},{"size":2636,"mtime":1613138069851,"results":"37","hashOfConfig":"34"},{"size":2080,"mtime":1613139850927,"results":"38","hashOfConfig":"34"},{"size":2919,"mtime":1613139950193,"results":"39","hashOfConfig":"34"},{"size":354,"mtime":1612299342565,"results":"40","hashOfConfig":"34"},{"size":316,"mtime":1612622438473,"results":"41","hashOfConfig":"34"},{"size":818,"mtime":1612812094599,"results":"42","hashOfConfig":"34"},{"size":1642,"mtime":1613055723210,"results":"43","hashOfConfig":"34"},{"size":946,"mtime":1612805798099,"results":"44","hashOfConfig":"34"},{"size":13325,"mtime":1613153483422,"results":"45","hashOfConfig":"34"},{"size":3599,"mtime":1613152154534,"results":"46","hashOfConfig":"34"},{"size":3756,"mtime":1613055328155,"results":"47","hashOfConfig":"34"},{"size":2879,"mtime":1613054568958,"results":"48","hashOfConfig":"34"},{"size":3841,"mtime":1613153699415,"results":"49","hashOfConfig":"34"},{"size":11656,"mtime":1613140597028,"results":"50","hashOfConfig":"34"},{"size":13681,"mtime":1613140682739,"results":"51","hashOfConfig":"34"},{"size":1443,"mtime":1612815059980,"results":"52","hashOfConfig":"34"},{"size":117,"mtime":1612887858421,"results":"53","hashOfConfig":"34"},{"size":1862,"mtime":1613064208384,"results":"54","hashOfConfig":"34"},{"size":1936,"mtime":1613139680298,"results":"55","hashOfConfig":"34"},{"size":9436,"mtime":1613140406736,"results":"56","hashOfConfig":"34"},{"size":8983,"mtime":1613001589932,"results":"57","hashOfConfig":"34"},{"size":4192,"mtime":1613152477356,"results":"58","hashOfConfig":"34"},{"size":75,"mtime":1612962352346,"results":"59","hashOfConfig":"34"},{"size":620,"mtime":1613000536623,"results":"60","hashOfConfig":"34"},{"size":1119,"mtime":1613153747574,"results":"61","hashOfConfig":"34"},{"size":2921,"mtime":1612986411491,"results":"62","hashOfConfig":"34"},{"size":3902,"mtime":1613140470307,"results":"63","hashOfConfig":"34"},{"size":2726,"mtime":1613153343134,"results":"64","hashOfConfig":"34"},{"size":13407,"mtime":1613153366474,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"1clf0f8",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"68"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"68"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"68"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\Projects\\voting_system\\src\\index.js",[],["134","135"],"F:\\Projects\\voting_system\\src\\reportWebVitals.js",[],"F:\\Projects\\voting_system\\src\\App.js",[],"F:\\Projects\\voting_system\\src\\components\\layouts\\landing\\index_.js",[],"F:\\Projects\\voting_system\\src\\components\\layouts\\Login\\Root.js",[],"F:\\Projects\\voting_system\\src\\components\\layouts\\Login\\LoginForm.js",[],"F:\\Projects\\voting_system\\src\\store\\index_.js",[],"F:\\Projects\\voting_system\\src\\reducer\\rootReducer.js",[],"F:\\Projects\\voting_system\\src\\reducer\\authReducer.js",[],"F:\\Projects\\voting_system\\src\\action\\types.js",[],"F:\\Projects\\voting_system\\src\\action\\authAction.js",[],"F:\\Projects\\voting_system\\src\\components\\layouts\\home\\Root.js",[],"F:\\Projects\\voting_system\\src\\components\\layouts\\nav\\Nav.js",[],"F:\\Projects\\voting_system\\src\\action\\attendantsAction.js",[],"F:\\Projects\\voting_system\\src\\reducer\\attendantReducer.js",[],"F:\\Projects\\voting_system\\src\\components\\layouts\\vote\\Root.js",[],"F:\\Projects\\voting_system\\src\\components\\layouts\\vote\\AgendaVoteForm.js",[],"F:\\Projects\\voting_system\\src\\components\\layouts\\vote\\CandidateVoteForm.js",["136"],"import React, { Component } from \"react\";\r\n\r\n// EXTERNAL IMPORT\r\nimport { BiBarcodeReader, BiReset } from \"react-icons/bi\";\r\nimport BarcodeScannerComponent from \"react-webcam-barcode-scanner\";\r\nimport { FiSearch } from \"react-icons/fi\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { toast } from \"react-toastify\";\r\nimport RiseLoader from \"react-spinners/RiseLoader\";\r\nimport { instance } from \"../../../api/config\";\r\nimport { connect } from \"react-redux\";\r\nimport { Tooltip } from \"react-tippy\";\r\n\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-dark.css\";\r\n\r\n// COMPONENT IMPORT\r\nimport { submitCandidateVote } from \"../../../action/voteAction\";\r\n\r\nclass CandidateVoteForm extends Component {\r\n  // Component state\r\n  state = {\r\n    // app state\r\n    isAttendantFetchingActivated: false,\r\n    returnedAttendantValue: [],\r\n    candiateData: [],\r\n    checkedCandidates: [],\r\n    candidateVoteType: 0,\r\n\r\n    // form state\r\n    barcodeIDResult: \"\",\r\n    toggelingBarcodeReaderCamera: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    instance\r\n      .get(\"/voting-agendas\")\r\n      .then((response) =>\r\n        response.data.votingAgendas && response.data.votingAgendas.length > 0\r\n          ? response.data.votingAgendas.map((SingleData) =>\r\n              this.setState({ candidateVoteType: SingleData.id })\r\n            )\r\n          : this.setState({ candidateVoteType: 0 })\r\n      )\r\n      .catch((error) =>\r\n        toast.error(\r\n          \"Unable to load Candidate Vote Type Data: \" +\r\n            error.response.data.error\r\n        )\r\n      );\r\n  }\r\n\r\n  render() {\r\n    // Local variables\r\n    const { isShareholderCreationLoading, submitCandidateVote } = this.props;\r\n    let dataValue = [];\r\n    // OnGrid ready\r\n    const onGridReady = (params) => {\r\n      let dataValues = [];\r\n      instance.get(\"/candidates\").then((response) => {\r\n        response.data.candidates.map((SingleData) =>\r\n          dataValues.push(SingleData)\r\n        );\r\n        this.setState({ candiateData: [...dataValues] }, () => {\r\n          params.api.applyTransaction({ add: this.state.candiateData });\r\n        });\r\n      });\r\n    };\r\n\r\n    // Column Headers\r\n    const columnDefs = [\r\n      {\r\n        headerName: \"Name\",\r\n        field: \"name\",\r\n        checkboxSelection: true,\r\n        minWidth: 500,\r\n        maxWidth: 500,\r\n      },\r\n    ];\r\n\r\n    const defaultColDef = {\r\n      flex: 1,\r\n    };\r\n\r\n    // Row selection type - whether it is single, multiple or both\r\n    const rowSelectionType = \"multiple\";\r\n\r\n    // Operation when the row is selected\r\n    const onSelectionChanged = (e) => {\r\n      // Adding the selected row to the state value\r\n      // Checking if the selected row length is less than 11\r\n      console.log(e.api.getSelectedRows());\r\n      if (e.api.getSelectedRows().length > 11)\r\n        toast.warning(\r\n          \"Selected Candidates shouldn't excced 11 Candidates. Your choice will be invalid !\",\r\n          { position: \"bottom-center\" }\r\n        );\r\n      e.api.getSelectedRows().map((SingleData) => {\r\n        dataValue.push(SingleData.id);\r\n        this.setState({\r\n          checkedCandidates: dataValue,\r\n        });\r\n      });\r\n    };\r\n\r\n    //   Handling scanned bar code result\r\n    const handleFetchingAttendantInformation = (scannedAttendantBarcodeID) => {\r\n      if (\r\n        scannedAttendantBarcodeID !== \"\" &&\r\n        scannedAttendantBarcodeID !== null\r\n      ) {\r\n        this.setState({ isAttendantFetchingActivated: true });\r\n        instance\r\n          .get(\"/barcode?barcode=\" + scannedAttendantBarcodeID)\r\n          .then((response) => {\r\n            if (response.data.shareholder !== null) {\r\n              this.setState({\r\n                returnedAttendantValue: [response.data.shareholder],\r\n                isAttendantFetchingActivated: false,\r\n              });\r\n            } else {\r\n              this.setState({\r\n                returnedAttendantValue: [],\r\n                isAttendantFetchingActivated: false,\r\n              });\r\n            }\r\n          });\r\n      } else {\r\n        toast.error(\r\n          \"Candidate Barcode ID Not Present. Please Scan Barcode First !\",\r\n          { position: \"bottom-center\" }\r\n        );\r\n      }\r\n    };\r\n\r\n    //   Submitting attendant vote\r\n    const submitCandidateVoteInformation = () => {\r\n      // do sth here\r\n      const {\r\n        checkedCandidates,\r\n        barcodeIDResult,\r\n        candidateVoteType,\r\n      } = this.state;\r\n      console.log(checkedCandidates.length);\r\n      if (checkedCandidates.length > 11) {\r\n        toast.error(\r\n          \"Selected Candidates shouldn't excced 11 Candidates. Your choice will be invalid !\",\r\n          { position: \"bottom-center\" }\r\n        );\r\n      } else {\r\n        if (checkedCandidates.length > 0) {\r\n          if (barcodeIDResult !== \"\" && barcodeIDResult !== null) {\r\n            if (candidateVoteType !== 0) {\r\n              submitCandidateVote(checkedCandidates, barcodeIDResult, candidateVoteType);\r\n              clearingFormData();\r\n            } else\r\n              toast.error(\r\n                \"Candidate vote agenda not retrived or not found in the store.\",\r\n                { position: \"bottom-center\" }\r\n              );\r\n          } else {\r\n            toast.error(\r\n              \"One or more fields aren't filled. Please provide and submit again!\",\r\n              { position: \"bottom-center\" }\r\n            );\r\n          }\r\n        } else {\r\n          toast.error(\r\n            \"One or more fields aren't filled. Please provide and submit again!\",\r\n            { position: \"bottom-center\" }\r\n          );\r\n        }\r\n      }\r\n    };\r\n\r\n    const clearingFormData = () => {\r\n      this.setState({\r\n        barcodeIDResult: \"\",\r\n        toggelingBarcodeReaderCamera: false,\r\n        returnedAttendantValue: [],\r\n        checkedCandidates: [],\r\n      });\r\n      document.getElementById(\"userBarcodeID\").value = \"\";\r\n    };\r\n\r\n    //   Displaying Fetched attendant data\r\n    const displayingFetchedAttendantData =\r\n      this.state.returnedAttendantValue.length > 0 ? (\r\n        this.state.returnedAttendantValue.map((SingleValue) => {\r\n          return (\r\n            <div key={SingleValue.id}>\r\n              <p className=\"font-bold text-md\">Attendant Information</p>\r\n              <div className=\"flex flex-row justify-evenly items-center mt-5 mb-5 space-x-4\">\r\n                <p className=\"text-md\">\r\n                  Name:{\" \"}\r\n                  <span className=\"font-bold\">{\" \" + SingleValue.name}</span>\r\n                </p>\r\n                <p className=\"text-md\">\r\n                  Total Share value:{\" \"}\r\n                  <span className=\"font-bold\">\r\n                    {\" \" + SingleValue.no_of_shares}\r\n                  </span>\r\n                </p>\r\n              </div>\r\n            </div>\r\n          );\r\n        })\r\n      ) : (\r\n        <div>\r\n          <p className=\"text-white\">No Record Found !</p>\r\n        </div>\r\n      );\r\n\r\n    if (isShareholderCreationLoading)\r\n      return <RiseLoader className=\"text-white mt-5\" size={10} color=\"white\" />;\r\n\r\n    return (\r\n      <div className=\"flex flex-col justify-center items-center text-white mb-20\">\r\n        <form className=\"w-3/4 mt-5\">\r\n          <div className=\"flex flex-row justify-center items-center space-x-4 w-full\">\r\n            <input\r\n              className=\"px-5 py-2 bg-transparent border w-1/2 border-gray-100 rounded-full text-white focus:outline-none focus:text-white\"\r\n              placeholder=\"Barcode ID\"\r\n              id=\"userBarcodeID\"\r\n              name=\"userBarcodeID\"\r\n              type=\"text\"\r\n              onChange={(e) => {\r\n                this.setState({ barcodeIDResult: e.target.value });\r\n              }}\r\n              value={\r\n                this.state.barcodeIDResult !== \"\"\r\n                  ? this.state.barcodeIDResult\r\n                  : \"\"\r\n              }\r\n            />\r\n            <Tooltip title=\"Scan Barcode\">\r\n              <button\r\n                className=\"px-2 py-2 bg-white text-third rounded-2xl\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  this.setState({\r\n                    toggelingBarcodeReaderCamera: !this.state\r\n                      .toggelingBarcodeReaderCamera,\r\n                  });\r\n                }}\r\n              >\r\n                <BiBarcodeReader size=\"20\" />\r\n              </button>\r\n            </Tooltip>\r\n            <Tooltip title=\"Reset Barcode\">\r\n              <button\r\n                className=\"px-2 py-2 bg-white text-third rounded-2xl\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  this.setState({\r\n                    barcodeIDResult: \"\",\r\n                    returnedAttendantValue: [],\r\n                  });\r\n                  document.getElementById(\"userBarcodeID\").value = \"\";\r\n                }}\r\n              >\r\n                <BiReset size=\"20\" />\r\n              </button>\r\n            </Tooltip>\r\n\r\n            {/* Displaying identify attendant button only if scanned result is null, toggeling camera is false and feched attendant value is null */}\r\n            <div>\r\n              {this.state.barcodeIDResult !== \"\" &&\r\n              !this.state.toggelingBarcodeReaderCamera ? (\r\n                this.state.returnedAttendantValue.length > 0 ? null : (\r\n                  <div>\r\n                    <Tooltip title=\"Identify Attendant\">\r\n                      <button\r\n                        className=\"px-3 py-2 bg-white text-third rounded-full\"\r\n                        onClick={(e) => {\r\n                          e.preventDefault();\r\n                          handleFetchingAttendantInformation(\r\n                            this.state.barcodeIDResult\r\n                          );\r\n                        }}\r\n                      >\r\n                        <FiSearch size=\"20\" />\r\n                      </button>\r\n                    </Tooltip>\r\n                  </div>\r\n                )\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Displaying the barcode scanner only if toggling camera state is true */}\r\n          <div className=\"w-3/4 m-auto\">\r\n            {this.state.toggelingBarcodeReaderCamera && (\r\n              <BarcodeScannerComponent\r\n                width={500}\r\n                height={100}\r\n                onUpdate={(error, result) => {\r\n                  if (result) {\r\n                    this.setState({\r\n                      barcodeIDResult: result.text,\r\n                      toggelingBarcodeReaderCamera: false,\r\n                    });\r\n                  } else\r\n                    toast.error(error, {\r\n                      position: \"bottom-center\",\r\n                    });\r\n                }}\r\n              />\r\n            )}\r\n          </div>\r\n\r\n          {/* Displaying fetched attendant data only if the fetched attendant data state is loaded */}\r\n          <div className=\"mt-10\">\r\n            {this.state.isAttendantFetchingActivated ? (\r\n              <RiseLoader className=\"text-white\" size={10} color=\"white\" />\r\n            ) : this.state.returnedAttendantValue.length > 0 ? (\r\n              <div>\r\n                {displayingFetchedAttendantData}\r\n                <div className=\"flex flex-row justify-between items-center\">\r\n                  <div\r\n                    className=\"ag-theme-dark w-full shadow-2xl bg-transparent text-white m-auto\"\r\n                    style={{ height: \"300px\", width: \"530px\" }}\r\n                  >\r\n                    <AgGridReact\r\n                      columnDefs={columnDefs}\r\n                      defaultColDef={defaultColDef}\r\n                      onGridReady={onGridReady}\r\n                      rowSelection={rowSelectionType}\r\n                      onSelectionChanged={onSelectionChanged}\r\n                      rowMultiSelectWithClick={true}\r\n                      suppressHorizontalScroll={false}\r\n                      className=\"bg-transparent\"\r\n                    ></AgGridReact>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-white\">\r\n                      <span className=\"text-2xl\">\r\n                        Selected Candidate Item Count:\r\n                      </span>\r\n                      <br />\r\n                      <span className=\"font-bold text-5xl mt-5\">\r\n                        {parseFloat(this.state.checkedCandidates.length)}\r\n                      </span>\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <button\r\n                  className=\"px-3 py-2 bg-transparent text-white rounded-md mt-5 shadow-2xl border border-gray-600 hover:bg-companyYello hover:text-primary\"\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    submitCandidateVoteInformation();\r\n                  }}\r\n                >\r\n                  Submit Vote\r\n                </button>\r\n              </div>\r\n            ) : <p className=\"mt-10 text-white\">No Record Found</p>}\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isShareholderCreationLoading: state.vote.isShareholderCreationLoading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    submitCandidateVote: (\r\n      candidateVoteData,\r\n      selectedAttendantBarcodeID,\r\n      candidateVoteType\r\n    ) =>\r\n      dispatch(\r\n        submitCandidateVote(\r\n          candidateVoteData,\r\n          selectedAttendantBarcodeID,\r\n          candidateVoteType\r\n        )\r\n      ),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CandidateVoteForm);\r\n","F:\\Projects\\voting_system\\src\\reducer\\voteReducer.js",[],"F:\\Projects\\voting_system\\src\\api\\config.js",[],"F:\\Projects\\voting_system\\src\\action\\voteAction.js",[],"F:\\Projects\\voting_system\\src\\components\\layouts\\shareholderRegistration\\Root.js",["137"],"import React, { Component } from \"react\";\r\n\r\n// EXTERNAL IMPORT\r\nimport { Redirect, Link } from \"react-router-dom\";\r\nimport { Tooltip } from \"react-tippy\";\r\n\r\n// COMPONENT IMPORT\r\nimport AppNavigation from \"../nav/Nav\";\r\nimport ShareholderView from \"./ViewShareholders\";\r\n\r\nclass Root extends Component {\r\n  // app state value\r\n  state = {\r\n    selectedShareholderData: [],\r\n    isEditingActivated: false,\r\n  };\r\n\r\n  render() {\r\n    // Route Guarding\r\n    if (!localStorage.getItem(\"username\")) return <Redirect to=\"/login\" />;\r\n\r\n    // callback props function for click event in edit clicked\r\n    const onEditButtonClicked = (selectedShareholderRow) => {\r\n      this.setState({ selectedShareholderData: selectedShareholderRow, isEditingActivated: true }, () => {\r\n        console.log(this.state.selectedShareholderData);\r\n      });\r\n    };\r\n\r\n    // checking if editing operation is activated\r\n    if (this.state.isEditingActivated)\r\n      return (\r\n        <Redirect\r\n          to={{\r\n            pathname: \"/admin/register\",\r\n            state: {\r\n              selectedShareholderData: this.state.selectedShareholderData,\r\n              isEditingActivated: this.state.isEditingActivated,\r\n            },\r\n          }}\r\n        />\r\n      );\r\n\r\n    return (\r\n      <div className=\"flex flex-col min-h-screen items-center bg-gradient-to-bl from-primary to-secondary text-white\">\r\n        <AppNavigation />\r\n\r\n        <div className=\"mr-auto ml-10\">\r\n          <Link to=\"/admin/register\">\r\n              <button className=\"px-5 py-2 bg-transparent shadow-2xl text-white text-md mr-auto border border-primary rounded-md hover:bg-companyYello hover:text-primary\">\r\n                Add Shareholder\r\n              </button>\r\n          </Link>\r\n        </div>\r\n\r\n        <div className=\"w-full\">\r\n          <ShareholderView onEditButtonClicked={onEditButtonClicked} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Root;\r\n","F:\\Projects\\voting_system\\src\\components\\layouts\\shareholderRegistration\\RegisterShareholderForm.js",[],"F:\\Projects\\voting_system\\src\\components\\layouts\\landing\\voteIndex.js",[],"F:\\Projects\\voting_system\\src\\components\\layouts\\agenda\\Root.js",[],"F:\\Projects\\voting_system\\src\\components\\shared\\shareedVariables.js",[],"F:\\Projects\\voting_system\\src\\components\\layouts\\nav\\LogoHeader.js",[],"F:\\Projects\\voting_system\\src\\components\\layouts\\vote\\CandidateVoteRoot.js",[],"F:\\Projects\\voting_system\\src\\components\\layouts\\shareholderRegistration\\viewShareholders.js",["138","139","140","141","142","143"],"F:\\Projects\\voting_system\\src\\components\\layouts\\shareholderRegistration\\ViewShareholders.js",["144"],"import React, { Component } from \"react\";\r\n\r\n// EXTERNAL IMPORT\r\nimport { toast } from \"react-toastify\";\r\nimport { AiFillEdit } from \"react-icons/ai\";\r\n\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-blue.css\";\r\n\r\n// COMPONENT IMPORTS\r\nimport { instance } from \"../../../api/config\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nclass ViewShareholders extends Component {\r\n  // app state variable\r\n  state = {\r\n    updatedShareholderList: [],\r\n    selectedEditableData: [],\r\n  };\r\n\r\n  render() {\r\n    // props value\r\n    const { onEditButtonClicked } = this.props;\r\n\r\n    // Ag_Grid related values\r\n    const onGridReady = (params) => {\r\n      instance\r\n        .get(\"/shareholders\")\r\n        .then((response) => {\r\n          this.setState({\r\n            updatedShareholderList: response.data.shareholders,\r\n          });\r\n          console.log(this.state.updatedShareholderList);\r\n        })\r\n        .then(() =>\r\n          params.api.applyTransaction({\r\n            add: this.state.updatedShareholderList,\r\n          })\r\n        )\r\n        .catch((error) =>\r\n          toast.warning(\r\n            \"Error While Loading Shareholder. Please Refresh the Page. Error Report: \" +\r\n              error.response.data.error\r\n          )\r\n        );\r\n    };\r\n\r\n    //   getting is_present value\r\n    const gettingPresentValue = function (params) {\r\n      return params.data.is_present ? \"Present\" : \"Not Present\";\r\n    };\r\n\r\n    //   getting is_attendant_delegated value\r\n    const gettingIsAttendantDelegated = function (params) {\r\n      return params.data.delegate_id ? \"Delegated\" : \"Not Delegated\";\r\n    };\r\n\r\n    const columnDefs = [\r\n      { headerName: \"Name\", field: \"name\", checkboxSelection: true },\r\n      {\r\n        headerName: \"Total No of Share\",\r\n        field: \"no_of_shares\",\r\n      },\r\n      { headerName: \"Phone Number\", field: \"phone\" },\r\n      {\r\n        headerName: \"Is Present\",\r\n        field: \"is_present\",\r\n        valueGetter: gettingPresentValue,\r\n      },\r\n      {\r\n        headerName: \"Delegation\",\r\n        field: \"delegate_id\",\r\n        valueGetter: gettingIsAttendantDelegated,\r\n      },\r\n      { headerName: \"Barcode ID\", field: \"barcode\" },\r\n      {\r\n        headerName: \"Action\",\r\n        field: \"id\",\r\n        cellRendererFramework: (params) => (\r\n          <button\r\n            className=\"px-2 text-primary py-1 rounded-md shadow-2xl\"\r\n            onClick={() => editShareholderOnClick(params)}\r\n          >\r\n            Edit\r\n          </button>\r\n        ),\r\n      },\r\n    ];\r\n\r\n    const defaultColDef = {\r\n      flex: 1,\r\n      filter: true,\r\n      sortable: true,\r\n      floatingFilter: true,\r\n    };\r\n\r\n    // row selection type\r\n    const rowSelectionType = \"single\";\r\n\r\n    // operation when the row is selected\r\n    const onSelectionChanged = (e) => {\r\n      console.log(e.api.getSelectedRows());\r\n    };\r\n\r\n    // operation on edit btn click\r\n    const editShareholderOnClick = (params) => {\r\n      onEditButtonClicked(params.data); // passing selected data to the parent component\r\n    };\r\n\r\n    // route guarding\r\n    if (!localStorage.getItem(\"username\")) return <Redirect to=\"/login\" />;\r\n\r\n    return (\r\n      <div className=\"p-10\">\r\n        <div\r\n          className=\"ag-theme-blue w-full bg-transparent border\"\r\n          style={{ height: \"575px\" }}\r\n        >\r\n          <AgGridReact\r\n            columnDefs={columnDefs}\r\n            defaultColDef={defaultColDef}\r\n            onGridReady={onGridReady}\r\n            rowSelectionType={rowSelectionType}\r\n            onSelectionChanged={onSelectionChanged}\r\n            rowMultiSelectWithClick={true}\r\n            pagination={true}\r\n            className=\"bg-transparent text-left text-black\"\r\n          ></AgGridReact>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ViewShareholders;\r\n","F:\\Projects\\voting_system\\src\\components\\layouts\\agenda\\RegisterNewAgenda.js",[],"F:\\Projects\\voting_system\\src\\components\\layouts\\home\\OnlyDelegatesHome.js",[],{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","severity":1,"message":"150","line":98,"column":48,"nodeType":"151","messageId":"152","endLine":98,"endColumn":50},{"ruleId":"153","severity":1,"message":"154","line":5,"column":10,"nodeType":"155","messageId":"156","endLine":5,"endColumn":17},{"ruleId":"153","severity":1,"message":"157","line":4,"column":10,"nodeType":"155","messageId":"156","endLine":4,"endColumn":18},{"ruleId":"153","severity":1,"message":"158","line":37,"column":11,"nodeType":"155","messageId":"156","endLine":37,"endColumn":22},{"ruleId":"153","severity":1,"message":"159","line":41,"column":11,"nodeType":"155","messageId":"156","endLine":41,"endColumn":21},{"ruleId":"153","severity":1,"message":"160","line":43,"column":11,"nodeType":"155","messageId":"156","endLine":43,"endColumn":24},{"ruleId":"153","severity":1,"message":"161","line":48,"column":11,"nodeType":"155","messageId":"156","endLine":48,"endColumn":27},{"ruleId":"153","severity":1,"message":"162","line":51,"column":11,"nodeType":"155","messageId":"156","endLine":51,"endColumn":29},{"ruleId":"153","severity":1,"message":"163","line":5,"column":10,"nodeType":"155","messageId":"156","endLine":5,"endColumn":20},"no-native-reassign",["164"],"no-negated-in-lhs",["165"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'Tooltip' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'onGridReady' is assigned a value but never used.","'columnDefs' is assigned a value but never used.","'defaultColDef' is assigned a value but never used.","'rowSelectionType' is assigned a value but never used.","'onSelectionChanged' is assigned a value but never used.","'AiFillEdit' is defined but never used.","no-global-assign","no-unsafe-negation"]